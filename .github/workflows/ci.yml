name: Run CI Go

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    
# env:
#   ENV_NAME: 'env value'

jobs:

  build-end-test:
    name: Build and Test ${{ matrix.mod }}
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 2
      matrix: 
        mod: ['product-api', 'currency']

    steps:
      # https://github.com/marketplace/actions/kubernetes-set-context
      - name: Kubeconfig
        uses: azure/k8s-set-context@v2
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_OCI }}
          # context: <context name> # current-context from kubeconfig is used as default

      - name: Kubectl get pods
        run: |
          kubectl get pods 
      
      # https://github.com/marketplace/actions/kubectl-tool-installer
      # - uses: azure/setup-kubectl@v2.0
      #   with:
      #     version: '<version>' # default is latest stable
      #   id: install

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Checkout code
        uses: actions/checkout@v2

        # https://github.com/marketplace/actions/docker-metadata-action
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
            # ghcr.io/username/app
          images: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.mod }}
          # generate Docker tags based on the following events/attributes
            # type=schedule
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{raw}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}.{{minor}}.{{patch}}
            type=semver,pattern={{major}}
            type=sha
          labels: |
            org.opencontainers.image.title=MyCustomTitle
            org.opencontainers.image.description=Another description
            org.opencontainers.image.vendor=MyCompany

      - name: Run multi-line command
        run: |
          echo 1. What is in this directory?
          tree
          echo
          echo 2. What is the go version?
          go version
          echo
          echo 3. What environment variables are available?
          env
          echo
          echo ${{ github.event.repository.name }}
          echo ${{ github.repository }}
          echo ${{ github.event.repository.name }}
          echo ${{ github.ref_name }}
          echo "$GITHUB_REF"
          echo "${GITHUB_REF##*/}"
          echo $(git describe --tags --abbrev=0)

      # - name: Get dependencies
      #   run: |
      #     cd ${{ github.workspace }}/${{ matrix.mod }}
      #     go get -v -t -d ./...

      - name: Fetch required Go modules
        run: |
          cd ${{ github.workspace }}/${{ matrix.mod }}
          go mod download

      # (Optional)
      - name: Build
        run: |
          cd ${{ github.workspace }}/${{ matrix.mod }}
          go build -v ./...

      - name: Run tests 
        run: |
          cd ${{ github.workspace }}/${{ matrix.mod }}
          # make test
          go test -v -cover ./...

      - name: Set up Docker Buildx
        id:   buildx
        uses: docker/setup-buildx-action@v1

      - name: Inspect builder
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"

      - name: Cache Docker layers
        uses: actions/cache@v3
        with: 
          path: /tmp/.buildx-cache
          key:  ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ github.workspace }}/${{ matrix.mod }}
          push: false
          load: true
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ matrix.mod }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to:   type=local,dest=/tmp/.buildx-cache
          # cache-from: type=registry,ref=user/app:latest
          # cache-to: type=inline

      - name: Run multi-line docker tags/labels
        run: |
          echo tags: ${{ steps.meta.outputs.tags }}
          echo labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  # test:
  #   name: Test ${{ matrix.mod }}
  #   needs: setup
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 2
  #     matrix: 
  #       mod: ['product-api', 'currency']
  #   steps:
  #     # - name: Checkout Repository
  #     #   uses: actions/checkout@v2

  #     # - name: Setup go
  #     #   uses: actions/setup-go@v2
  #     #   with:
  #     #     go-version: 1.17

  #     # - name: Build
  #     #   run: |
  #     #     cd ${{ github.workspace }}/${{ matrix.mod }}
  #     #     go build -v ./...

  #     - name: Test 
  #       run: |
  #         cd ${{ github.workspace }}/${{ matrix.mod }}
  #         go test -race ./...
  
  sonarcloud:
    name: SonarCloud
    needs: build-end-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      # https://github.com/marketplace/actions/sonarcloud-scan
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        # with:
        #   # change the analysis base directory by using the optional input projectBaseDir
        #   projectBaseDir: my-custom-directory 
        #   args: >
        #     -Dsonar.verbose=true
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # https://github.com/marketplace/actions/sonarqube-quality-gate-check
      # - name: SonarQube Quality Gate check
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # build:
  #   name: Test ${{ matrix.mod }}
  #   needs: sonarcloud
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 2
  #     matrix: 
  #       mod: ['product-api', 'currency']
  #   steps:
  #     - name: Build
  #       run: |
  #         cd ${{ github.workspace }}/${{ matrix.mod }}
  #         go build -v ./...

# https://github.com/marketplace/actions/build-and-push-docker-images
      # - name: Push to registry
      # - name: Create Git Version
